# PostgreSQL High Availability Cluster Configuration for ERP System
# This configuration sets up master-slave replication with automatic failover

version: '3.8'

services:
  # PostgreSQL Primary (Master) Node
  postgres-primary:
    image: postgres:15
    container_name: erp-postgres-primary
    hostname: postgres-primary
    environment:
      POSTGRES_DB: erp_main
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
      
      # Primary-specific configurations
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_SLAVE_SERVICE: postgres-replica-1,postgres-replica-2
      POSTGRES_HOST_AUTH_METHOD: md5
      
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./database/scripts/setup-primary.sh:/docker-entrypoint-initdb.d/setup-primary.sh
      - ./database/config/postgresql-primary.conf:/etc/postgresql/postgresql.conf
      - ./database/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      
    ports:
      - "5432:5432"
      
    networks:
      - erp-db-network
      
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_main"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # PostgreSQL Replica Node 1
  postgres-replica-1:
    image: postgres:15
    container_name: erp-postgres-replica-1
    hostname: postgres-replica-1
    environment:
      POSTGRES_DB: erp_main
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
      PGUSER: postgres
      
    volumes:
      - postgres_replica_1_data:/var/lib/postgresql/data
      - ./database/scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
      - ./database/config/postgresql-replica.conf:/etc/postgresql/postgresql.conf
      
    ports:
      - "5433:5432"
      
    networks:
      - erp-db-network
      
    depends_on:
      postgres-primary:
        condition: service_healthy
        
    command: >
      bash -c "
      until pg_isready -h postgres-primary -p 5432 -U erp_user; do
        echo 'Waiting for primary to be ready...'
        sleep 2
      done
      echo 'Primary is ready, setting up replica...'
      /docker-entrypoint-initdb.d/setup-replica.sh
      postgres -c config_file=/etc/postgresql/postgresql.conf
      "
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # PostgreSQL Replica Node 2
  postgres-replica-2:
    image: postgres:15
    container_name: erp-postgres-replica-2
    hostname: postgres-replica-2
    environment:
      POSTGRES_DB: erp_main
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_MASTER_SERVICE: postgres-primary
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: replicator_password
      PGUSER: postgres
      
    volumes:
      - postgres_replica_2_data:/var/lib/postgresql/data
      - ./database/scripts/setup-replica.sh:/docker-entrypoint-initdb.d/setup-replica.sh
      - ./database/config/postgresql-replica.conf:/etc/postgresql/postgresql.conf
      
    ports:
      - "5434:5432"
      
    networks:
      - erp-db-network
      
    depends_on:
      postgres-primary:
        condition: service_healthy
        
    command: >
      bash -c "
      until pg_isready -h postgres-primary -p 5432 -U erp_user; do
        echo 'Waiting for primary to be ready...'
        sleep 2
      done
      echo 'Primary is ready, setting up replica...'
      /docker-entrypoint-initdb.d/setup-replica.sh
      postgres -c config_file=/etc/postgresql/postgresql.conf
      "
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s

  # PgBouncer Connection Pooler for Load Balancing
  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: erp-pgbouncer
    environment:
      DATABASES_HOST: postgres-primary
      DATABASES_PORT: 5432
      DATABASES_USER: erp_user
      DATABASES_PASSWORD: erp_password
      DATABASES_DBNAME: erp_main
      POOL_MODE: transaction
      MAX_CLIENT_CONN: 1000
      DEFAULT_POOL_SIZE: 25
      RESERVE_POOL_SIZE: 5
      SERVER_RESET_QUERY: DISCARD ALL
      SERVER_CHECK_QUERY: SELECT 1
      SERVER_CHECK_DELAY: 30
      
    volumes:
      - ./database/config/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./database/config/userlist.txt:/etc/pgbouncer/userlist.txt
      
    ports:
      - "6432:5432"
      
    networks:
      - erp-db-network
      
    depends_on:
      postgres-primary:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD-SHELL", "psql -h localhost -p 5432 -U erp_user -d erp_main -c 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Patroni for High Availability and Automatic Failover
  patroni-1:
    image: postgres:15
    container_name: erp-patroni-1
    hostname: patroni-1
    environment:
      PATRONI_NAME: patroni-1
      PATRONI_POSTGRESQL_CONNECT_ADDRESS: patroni-1:5432
      PATRONI_RESTAPI_CONNECT_ADDRESS: patroni-1:8008
      PATRONI_RESTAPI_LISTEN: 0.0.0.0:8008
      PATRONI_POSTGRESQL_DATA_DIR: /data/patroni
      PATRONI_POSTGRESQL_PGPASS: /tmp/pgpass
      PATRONI_POSTGRESQL_LISTEN: 0.0.0.0:5432
      PATRONI_SUPERUSER_USERNAME: postgres
      PATRONI_SUPERUSER_PASSWORD: postgres_password
      PATRONI_REPLICATION_USERNAME: replicator
      PATRONI_REPLICATION_PASSWORD: replicator_password
      PATRONI_SCOPE: postgres-cluster
      PATRONI_ETCD3_HOSTS: etcd:2379
      
    volumes:
      - patroni_1_data:/data/patroni
      - ./database/config/patroni.yml:/opt/app/patroni.yml
      
    ports:
      - "5435:5432"
      - "8008:8008"
      
    networks:
      - erp-db-network
      
    depends_on:
      - etcd
      
    command: patroni /opt/app/patroni.yml

  # etcd for Patroni cluster coordination
  etcd:
    image: quay.io/coreos/etcd:v3.5.0
    container_name: erp-etcd
    hostname: etcd
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCD_INITIAL_CLUSTER_TOKEN: postgres-cluster
      ETCD_INITIAL_CLUSTER: etcd=http://etcd:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://etcd:2380
      ETCD_NAME: etcd
      
    volumes:
      - etcd_data:/etcd_data
      
    ports:
      - "2379:2379"
      - "2380:2380"
      
    networks:
      - erp-db-network
      
    command: >
      etcd
      --data-dir=/etcd_data
      --listen-client-urls=http://0.0.0.0:2379
      --advertise-client-urls=http://etcd:2379
      --listen-peer-urls=http://0.0.0.0:2380
      --initial-advertise-peer-urls=http://etcd:2380
      --initial-cluster=etcd=http://etcd:2380
      --initial-cluster-token=postgres-cluster
      --initial-cluster-state=new

  # HAProxy for Database Load Balancing
  haproxy-db:
    image: haproxy:2.8
    container_name: erp-haproxy-db
    volumes:
      - ./database/config/haproxy-db.cfg:/usr/local/etc/haproxy/haproxy.cfg
      
    ports:
      - "5000:5000"  # Write operations (primary)
      - "5001:5001"  # Read operations (replicas)
      - "8404:8404"  # HAProxy stats
      
    networks:
      - erp-db-network
      
    depends_on:
      - postgres-primary
      - postgres-replica-1
      - postgres-replica-2
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Database Monitoring with pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: erp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@erp-system.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/config/servers.json:/pgadmin4/servers.json
      
    ports:
      - "8090:80"
      
    networks:
      - erp-db-network
      
    depends_on:
      - postgres-primary

  # PostgreSQL Exporter for Prometheus Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: erp-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://erp_user:erp_password@postgres-primary:5432/erp_main?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yml"
      PG_EXPORTER_DISABLE_DEFAULT_METRICS: "false"
      PG_EXPORTER_DISABLE_SETTINGS_METRICS: "false"
      
    volumes:
      - ./database/config/postgres-exporter-queries.yml:/etc/postgres_exporter/queries.yml
      
    ports:
      - "9187:9187"
      
    networks:
      - erp-db-network
      
    depends_on:
      - postgres-primary

volumes:
  postgres_primary_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/erp/data/postgres-primary
      
  postgres_replica_1_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/erp/data/postgres-replica-1
      
  postgres_replica_2_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/erp/data/postgres-replica-2
      
  patroni_1_data:
    driver: local
    
  etcd_data:
    driver: local
    
  pgadmin_data:
    driver: local

networks:
  erp-db-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: erp-db-bridge