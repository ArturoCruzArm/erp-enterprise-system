apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: erp-restricted
  namespace: erp-system
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false
  seLinux:
    rule: RunAsAny

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: erp-restricted-psp-user
rules:
- apiGroups: ['policy']
  resources: ['podsecuritypolicies']
  verbs: ['use']
  resourceNames:
  - erp-restricted

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: erp-restricted-psp-user
roleRef:
  kind: ClusterRole
  name: erp-restricted-psp-user
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: default
  namespace: erp-system

---
# Service Account for ERP services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: erp-service-account
  namespace: erp-system
automountServiceAccountToken: false

---
# RBAC for ERP services
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: erp-service-role
  namespace: erp-system
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: erp-service-rolebinding
  namespace: erp-system
subjects:
- kind: ServiceAccount
  name: erp-service-account
  namespace: erp-system
roleRef:
  kind: Role
  name: erp-service-role
  apiGroup: rbac.authorization.k8s.io